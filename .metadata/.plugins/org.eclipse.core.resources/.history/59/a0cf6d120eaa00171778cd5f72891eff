package model;

/**
 * SimulationResults.java
 * 
 * Contains the data for a set of results from a grain simulation.
**/

public class SimulationResults
{
	// Private fields for the results
	// ADDME: comments stating the units for each field
	private double time;
	private double massGeneratedOverall;
	private double massGeneratedPerGrain[];
	private double portToThroat[];
	private double massFlowPerAreaGrain[];
	private double burnArea;
	private double burnRate;
	private double chamberPressure;
	private double kn;
	private double lStar;
	private double systemMass;
	private double systemCenterOfGravity;
	
	
	
	/**
	 * toString()
	 * 
	 * Purpose: Returns a textual representation of the results, which
	 * 		only includes the time and the chamber pressure.
	 * 
	 * Parameters: None.
	 * 
	 * Returns: String. A textual representation of the results, which
	 * 		only includes the time and the chamber pressure.
	**/
	
	@Override
	public String toString ()
	{
		return time + "," + chamberPressure;
	} // toString()
	
	
	
	/**
	 * getTime()
	 * 
	 * Purpose: Returns the time for the results.
	 * 
	 * Parameters: None.
	 * 
	 * Returns: double. The time for the results.
	**/
	
	public double getTime ()
	{
		return time;
	} // getTime()
	
	
	
	/**
	 * setTime()
	 * 
	 * Purpose: Changes the time of the results to a new value.
	 * 
	 * Parameters:
	 * 		double newTime -- New value to set the time.
	 * 
	 * Returns: void.
	**/
	
	public void setTime (double newTime)
	{
		this.time = newTime;
	} // setTime()
	
	
	
	/**
	 * getMassGeneratedOverall()
	 * 
	 * Purpose: Returns the mass generated overall.
	 * 
	 * Parameters: None.
	 * 
	 * Returns: double. the mass generated overall.
	**/
	
	public double getMassGeneratedOverall ()
	{
		return massGeneratedOverall;
	} // getMassGeneratedOverall()
	
	
	
	/**
	 * setMassGeneratedOverall()
	 * 
	 * Purpose: Changes the mass generated overall to a new value.
	 * 
	 * Parameters:
	 * 		double newMassGeneratedOverall -- New value to set the
	 * 			mass generated overall.
	 * 
	 * Returns: void.
	**/
	
	public void setMassGeneratedOverall (double newMassGeneratedOverall)
	{
		this.massGeneratedOverall = newMassGeneratedOverall;
	} // setMassGeneratedOverall()
	
	
	
	/**
	 * getMassGeneratedPerGrain()
	 * 
	 * Purpose: Returns an array containing the mass generated for all
	 * 		of the grains in a simulation.
	 * 
	 * Parameters: None.
	 * 
	 * Returns: double[]. The mass generated for each grain in a simulation.
	**/
	
	public double[] getMassGeneratedPerGrain ()
	{
		return massGeneratedPerGrain;
	} // getMassGeneratedPerGrain()
	
	
	
	/**
	 * setMassGeneratedPerGrain()
	 * 
	 * Purpose: Changes the mass generated per grain for each grain to
	 * 		new values.
	 * 
	 * Parameters:
	 * 		double[] newMassGeneratedPerGrain -- New value to set the
	 * 			mass generated per grain, for each grain.
	 * 
	 * Returns: void.
	**/
	
	public void setMassGeneratedPerGrain (double[] newMassGeneratedPerGrain)
	{
		this.massGeneratedPerGrain = newMassGeneratedPerGrain;
	} // setMassGeneratedPerGrain()
	
	
	
	/**
	 * getPortToThroat()
	 * 
	 * Purpose: Returns the port-to-throat of each grain in a simulation.
	 * 
	 * Parameters: None.
	 * 
	 * Returns: double[]. The port-to-throat for each grain in a simulation.
	**/
	
	public double[] getPortToThroat ()
	{
		return portToThroat;
	} // getPortToThroat()
	
	
	
	/**
	 * setPortToThroat()
	 * 
	 * Purpose: Changes the port to throat values for each grain
	 * 		in a simulation to new values.
	 * 
	 * Parameters:
	 * 		double[] newPortToThroat -- New values to set the port-
	 * 			to-throat for each grain.
	 * 
	 * Returns: void.
	 **/
	
	public void setPortToThroat (double[] newPortToThroat)
	{
		this.portToThroat = newPortToThroat;
	} // setPortToThroat()
	
	
	
	/**
	 * getMassFlowPerAreaGrain()
	 * 
	 * Purpose: Returns an array that contains the mass flow per area
	 * 		grain for each grain in a simulation.
	 * 
	 * Parameters: None.
	 * 
	 * Returns: double[]. An array that contains the mass flow per area
	 * 		grain for each grain in a simulation.
	**/
	
	public double[] getMassFlowPerAreaGrain ()
	{
		return massFlowPerAreaGrain;
	} // getMassFlowPerAreaGrain()
	
	
	
	/**
	 * setMassFlowPerAreaGrain()
	 * 
	 * Purpose: Changes the mass flow per area grain for each grain to
	 * 		new values.
	 * 
	 * Parameters:
	 * 		double[] newMassPerAreaGrain -- New values to set the mass flow
	 * 			per area grain for each grain.
	 * 
	 * Returns: void.
	**/
	
	public void setMassFlowPerAreaGrain (double[] newMassFlowPerAreaGrain)
	{
		this.massFlowPerAreaGrain = newMassFlowPerAreaGrain;
	} // setMassFlowPerAreaGrain()
	
	
	
	/**
	 * getBurnArea()
	 * 
	 * Purpose: Returns the burn area of the results.
	 * 
	 * Parameters: None.
	 * 
	 * Returns: double. The burn area of the results.
	**/
	
	public double getBurnArea ()
	{
		return burnArea;
	} // getBurnArea()
	
	
	
	/**
	 * setBurnArea()
	 * 
	 * Purpose: 
	 * 
	 * Parameters:
	 * 		double newMotorAvailableArea -- 
	 * 
	 * Returns: void.
	**/
	
	public void setBurnArea (double newMotorAvailableArea)
	{
		this.burnArea = newMotorAvailableArea;
	} // setBurnArea()
	
	
	
	/**
	 * getBurnRate()
	 * 
	 * Purpose: Returns the burn rate from the results.
	 * 
	 * Parameters: None.
	 * 
	 * Returns: double. The burn rate from the results.
	**/
	
	public double getBurnRate ()
	{
		return burnRate;
	} // getBurnRate()
	
	
	
	public void setBurnRate(double burnRate)
	{
		this.burnRate = burnRate;
	}
	
	
	
	/**
	 * getChamberPressure()
	 * 
	 * Purpose: Returns the chamber pressure of the results.
	 * 
	 * Parameters: None.
	 * 
	 * Returns: double. The chamber pressure of the results.
	**/
	
	public double getChamberPressure ()
	{
		return chamberPressure;
	} // getChamberPressure()
	
	
	
	public void setChamberPressure(double chamberPressure)
	{
		this.chamberPressure = chamberPressure;
	}
	
	
	
	/**
	 * getKn()
	 * 
	 * Purpose: Returns the ratio of the burn area of the propellant
	 * 		to the area of the nozzle throat (kn). 
	 * 
	 * Parameters: None.
	 * 
	 * Returns: double. The ratio of the burn area of the propellant
	 * 		to the area of the nozzle throat (kn). 
	**/
	
	public double getKn ()
	{
		return kn;
	} // getKn()
	
	
	
	/**
	 * setKn()
	 * 
	 * Purpose: Changes the kn of the results to a new value.
	 * 
	 * Parameters:
	 * 		double newKn -- New value to set the kn.
	 * 
	 * Returns: void.
	**/
	
	public void setKn (double newKn)
	{
		this.kn = newKn;
	} // setKn()

	
	
	/**
	 * getLStar()
	 * 
	 * Purpose: Returns the characteristic length (L*) of the results.
	 * 
	 * Parameters: None.
	 * 
	 * Returns: double. The characteristic length (L*) of the results.
	**/
	
	public double getLStar ()
	{
		return lStar;
	} // getLStar()
	
	
	
	/**
	 * setLStar()
	 * 
	 * Purpose: Changes the characteristic length (L*) of the results
	 * 		to a new value.
	 * 
	 * Parameters:
	 * 		newLStar -- New value to set the characteristic length (L*).
	 * 
	 * Returns: void.
	**/
	
	public void setLStar (double newLStar)
	{
		this.lStar = newLStar;
	} // setLStar()
	
	
	
	/**
	 * getSystemMass()
	 * 
	 * Purpose: Returns the system mass of the results.
	 * 
	 * Parameters: None.
	 * 
	 * Returns: double. The system mass of the results.
	**/
	
	public double getSystemMass ()
	{
		return systemMass;
	} // getSystemMass()
	
	
	
	/**
	 * setSystemMass()
	 * 
	 * Purpose: Changes the system mass to a new value.
	 * 
	 * Parameters:
	 * 		double newSystemMass -- New value to set the system mass.
	 * 
	 * Returns: void.
	**/
	
	public void setSystemMass (double newSystemMass)
	{
		this.systemMass = newSystemMass;
	} // setSystemMass()

	
	
	/**
	 * getSystemCenterOfGravity()
	 * 
	 * Purpose: Returns the system center of gravity for the results.
	 * 
	 * Parameters: None.
	 * 
	 * Returns: double. The system center of gravity for the results.
	**/
	
	public double getSystemCenterOfGravity ()
	{
		return systemCenterOfGravity;
	} // getSystemCenterOfGravity()

	
	
	/**
	 * setSystemCenterOfGravity()
	 * 
	 * Purpose: Changes the system center of gravity to a new value.
	 * 
	 * Parameters:
	 * 		double newSystemCenterOfGravity -- New value to set the system
	 * 			center of gravity.
	 * 
	 * Returns: void.
	**/
	
	public void setSystemCenterOfGravity (double newSystemCenterOfGravity)
	{
		this.systemCenterOfGravity = newSystemCenterOfGravity;
	} // setSystemCenterOfGravity()

} // class SimulationResults
