package controller;

import java.util.Scanner;
import java.util.LinkedList;
import java.util.List;

import model.Grain;
import model.Nozzle;
import model.Result;
import model.RocketMotor;

/**
 * CMDLineInterface.java
 * 
 * This class runs the command-line interface for iteration 1 of OpenBurn.
 * The goal is to be able to run and produce accurate results before the
 * GUI is in place.
**/

public class CMDLineInterface
{
	private static final String START_MSG = "OpenBurn: Iteration #1\n";
	private static final String GRAIN_NUM = "Grain number: ";
	
	// General prompts
	private static final String GRAIN_PROMPT   = "Enter number of grains (Must enter at least 1): ";
	private static final String DENSITY_PROMPT = "Enter propellant density (Must be positive): ";
	
	// Grain prompts
	private static final String OUTER_DIAMETER_PROMPT = "Enter outer diameter (Must be positive): ";
	private static final String INNER_DIAMETER_PROMPT = "Enter inner diameter (Must be positive): ";
	private static final String LENGTH_PROMPT         = "Enter length (Must be positive): ";
	private static final String BURNING_ENDS_PROMPT   = "Enter number of burning ends (Must be 0, 1, or 2): ";
	
	// Nozzle prompts
	private static final String THROAT_DIAMETER_PROMPT   = "Enter throat diameter (Must be positive): ";
	private static final String ENTRANCE_DIAMETER_PROMPT = "Enter entrance diameter (Must be positive): ";
	private static final String EXIT_DIAMETER_PROMPT     = "Enter exit diameter (Must be positive): ";
	private static final String CF_PROMPT                = "Enter CF (Must be positive): ";
	
	// Error Messages
	private static final String NULL_SCANNER_MSG = "\nERROR: Null scanner for input!\n";
	private static final String INPUT_ERROR_MSG  = "\nERROR: Invalid input!\n";
	
	// Error status
	private static final int ERROR_OCCURRED = 1;
	
	
	
	/**
	 * main()
	 * 
	 * Purpose:
	 * 
	 * Parameters:
	 * 		String[] args -- Command-line arguments. Not needed here.
	 * 
	 * Returns: void.
	**/
	
	public static void main (String[] args)
	{
		System.out.println(START_MSG);
		
		// Scanner for keyboard input
		Scanner input = new Scanner(System.in);
		
		// Prompt user for number of grains
		// Prompt user for propellant density
		int numberOfGrains = promptNumGrains(input);
		promptPropellantDensity(input);
		
		// Continuously prompt the user for input and create a list of Grains
		// Current implementation of the list is: LinkedList
		List<Grain> listOfGrains = new LinkedList<Grain>();
		for (int grainNum = 0; grainNum < numberOfGrains; grainNum++)
		{
			System.out.println(GRAIN_NUM + grainNum);
			listOfGrains.add(createGrain(input));
		}
		
		/*
		Nozzle noz = getCMDnizzel(input, numberOfGrains);
		
		double deltaTime = -1;
		while(deltaTime <= 0)
		{
			System.out.print("What time step do you want to use? must be positive.  ");
			if(input.hasNextInt() == false)
			{
				System.err.println("\nERROR: Something went wrong with scanner.");
			}
			else
			{
				deltaTime = input.nextInt();
			}
		}
		
		LinkedList<Result> theResults = RocketMotor.simulate(listOfGrains, deltaTime, noz);
		
		
		// more stuff here eventually
		*/
		
		input.close();   // Close keyboard input
	} // main()
	
	
	
	/**
	 * 
	**/
	
	private static int promptInt (Scanner input, String promptMessage)
	{
		// Check for null scanner
		if (input == null)
			throw new IllegalArgumentException(NULL_SCANNER_MSG);
		
		// Prompt the user for input until a positive number or error
		int desiredInt = -1;
		while (desiredInt < 1)
		{
			System.out.print(promptMessage);
			
			// Response was not an integer, error
			if (input.hasNextInt() == false)
			{
				System.err.println(INPUT_ERROR_MSG);
				System.exit(ERROR_OCCURRED);
			}
			
			// Valid input
			else
				desiredInt = input.nextInt();
		}
		
		return desiredInt;
	} // promptInt()
	
	
	
	/**
	 * 
	**/
	
	private static double promptDouble (Scanner input, String promptMessage)
	{
		// Check for null scanner
		if (input == null)
			throw new IllegalArgumentException(NULL_SCANNER_MSG);
		
		// Prompt the user for input until a positive number or error
		double desiredDouble = -1.0;
		while (desiredDouble <= 0.0)
		{
			System.out.print(promptMessage);
			
			// Response was not a double, error
			if (input.hasNextDouble() == false)
			{
				System.err.println(INPUT_ERROR_MSG);
				System.exit(ERROR_OCCURRED);
			}
			
			// Valid input
			else
				desiredDouble = input.nextDouble();
		}
		
		return desiredDouble;
	} // desiredDouble()
	
	
	
	/**
	 * promptPropellantDensity()
	 * 
	 * Purpose: Prompts the user for the propellant density, then
	 * 		sets the density to the user response for all Grains.
	 * 
	 * Parameters:
	 * 		Scanner input -- User input, preferably keyboard input.
	 * 
	 * Returns: void.
	**/
	
	private static void promptPropellantDensity (Scanner input)
	{
		// Check for null scanner
		if (input == null)
			throw new IllegalArgumentException(NULL_SCANNER_MSG);
		
		// Prompt the user for input until a positive number or error
		double density = -1.0;
		while (density <= 0.0)
		{
			System.out.print(DENSITY_PROMPT);   // Prompt message
			
			// Response was not a double, error
			if (input.hasNextDouble() == false)
			{
				System.err.println(INPUT_ERROR_MSG);
				System.exit(ERROR_OCCURRED);
			}
			
			// Valid input
			else
				density = input.nextDouble();
		}
		
		// Set the propellant density for Grains
		Grain.setPropellantDensity(density);
	} // promptPropellantDensity()
	
	
	
	/**
	 * createGrain()
	 * 
	 * Purpose: Creates and returns a Grain object by prompting the
	 * 		user for input. It is recommended that the input is
	 * 		given by keyboard.
	 * 
	 * Parameters:
	 * 		Scanner input -- User input, preferably keyboard input.
	 * 
	 * Returns: Grain. A new Grain object with data from user input.
	**/
	
	private static Grain createGrain (Scanner input)
	{
		// Initialize all dimensions for loops
		double outerDiameter = -1.0;
		double innerDiameter = -1.0;
		
		// Prompt the user for inner and outer diameters until the outer
		// diameter is greater than the inner diameter.
		while (innerDiameter >= outerDiameter)
		{
			outerDiameter = promptOuterDiameter(input);
			innerDiameter = promptInnerDiameter(input);
		}
		
		// Prompt user for a length
		double length = promptLength(input);
		
		// Prompt user for the number of burning ends
		int numBurningEnds = promptNumBurningEnds(input);
		
		// Use new data to create and return a Grain
		return (new Grain(length, outerDiameter, innerDiameter, numBurningEnds));
	} // createGrain()
	
	
	
	
	
	
	
	
	/**
	 * 
	**/
	
	private static Nozzle createNozzle (Scanner input, int numberOfGrains)
	{
		
		
		double cf = -1;
		
		double throatDiameter   = promptThroatDiameter(input);
		double entranceDiameter = promptEntranceDiameter(input);
		double exitDiameter     = promptExitDiameter(input);
		
		
		
		
		
		while(cf <= 0)
		{
			System.out.print("What is the Nozzle's cf? must be positive.  ");
			if(input.hasNextInt() == false)
			{
				System.err.println(INPUT_ERROR_MSG);
			}
			else
			{
				cf = input.nextInt();
			}
		}
		
		return (new Nozzle(throatDiameter, entranceDiameter, exitDiameter, cf, numberOfGrains));
	}
	
	
	
	
	
	
	
} // class Main
