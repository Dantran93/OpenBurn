package view;

import controller.NumberTextField;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.control.RadioButton;
import javafx.scene.layout.Pane;
import javafx.scene.text.Text;

/**
 * PropellantInputView.java
 * 
 * Purpose: Contains the input fields for a propellant on the
 * 		OpenBurn graphical user interface.
**/

public class PropellantInputView extends Pane
{
	// Labels
	private static final String DENSITY_PROMPT = "Propellant Density";
	private static final String STEADY_STATE   = "Steady-State";
	private static final String EMPERICAL      = "Emperical";
	private static final String PR_TEXT        = "Pr =";
	private static final String BR_TEXT        = "Br =";
	private static final String KN_TEXT        = "Kn +";
	
	
	private static final String BURN_RATE_COEFFICIENT_PROMPT = "Burn Rate Coefficient";
	private static final String BURN_RATE_EXPONENT_PROMPT    = "Burn Rate Exponent";
	private static final String C_STAR_PROMPT                = "Characteristic Velocity (c*)";
	
	
	
	// Constants
	private static final int FIRST_COL_X         = 20;
	private static final int SECOND_COL_X        = 250;
	private static final int FIRST_ROW_PROMPT_Y  = 30;
	private static final int FIRST_ROW_FIELD_Y   = 40;
	private static final int SECOND_ROW_PROMPT_Y = 110;
	private static final int SECOND_ROW_FIELD_Y  = 120;
	
	
	
	// Components
	private Text propDensityText;
	private Text burnRateCoefficientText;
	private Text burnRateExponentText;
	private Text cStarText;
	private Text prText;
	private Text brText;
	private Text knTextbr;
	private Text knTextpr;
	private NumberTextField propDensityTextField;
	private NumberTextField burnRateCoefficientTextField;
	private NumberTextField burnRateExponentTextField;
	private NumberTextField cStarTextField;
	private NumberTextField prTextField;
	private NumberTextField brTextField;
	private NumberTextField knTextFieldpr;
	private NumberTextField knTextFieldbr;
	private RadioButton steadyStateCheck;
	private RadioButton empericalCheck;
	
	
	
	/**
	 * PropellantInputView Constructor
	 * 
	 * Purpose: Creates and initializes the input fields for propellant.
	**/
	public PropellantInputView()
	{
		// Invoke Pane super constructor
		super();
		
		// Add components
		addPropellantDensityInput();
		
		addSteadyStateCheck();
		addEmpericalCheck();
		
		addBurnRateCoefficientInput();
		addBurnRateExponentInput();
		addCstarInput();
		
		//addPrInput();
		//addBrInput();
		
		
	}//PropellantInputView()
	
	
	
	/**
	 * 
	**/
	
	private void addPropellantDensityInput ()
	{
		// Propellant Density prompt
		propDensityText = new Text(DENSITY_PROMPT);
		propDensityText.setTranslateX(FIRST_COL_X);
		propDensityText.setTranslateY(FIRST_ROW_PROMPT_Y);
		this.getChildren().add(propDensityText);
		
		// Propellant Density input field
		propDensityTextField = new NumberTextField();
		propDensityTextField.setTranslateX(FIRST_COL_X);
		propDensityTextField.setTranslateY(FIRST_ROW_FIELD_Y);
		this.getChildren().add(propDensityTextField);
	} // addPropellantDensityInput()
	
	
	
	/*
	 * 
	 */
	
	private void addSteadyStateCheck ()
	{
		steadyStateCheck = new RadioButton(STEADY_STATE);
		steadyStateCheck.setTranslateX(20);
		steadyStateCheck.setTranslateY(100);
		steadyStateCheck.setSelected(true);
		this.getChildren().add(steadyStateCheck);
		
		steadyStateCheck.setOnAction(new EventHandler<ActionEvent> ()
		{
			// Handle actions when toggle is clicked
		    @Override public void handle (ActionEvent e)
		    {
		    	steadyStateCheck.setSelected(false);
		    	empericalCheck.setSelected(true);
		    }
		});
	}
	
	
	
	/*
	 * 
	 */
	
	private void addEmpericalCheck ()
	{
		empericalCheck = new RadioButton(EMPERICAL);
		empericalCheck.setTranslateX(180);
		empericalCheck.setTranslateY(100);
		empericalCheck.setSelected(false);
		this.getChildren().add(empericalCheck);
		
		empericalCheck.setOnAction(new EventHandler<ActionEvent> ()
		{
			// Handle actions when toggle is clicked
		    @Override public void handle (ActionEvent e)
		    {
		    	empericalCheck.setSelected(false);
		    	steadyStateCheck.setSelected(true);
		    }
		});
	}
	
	
	
	/**
	 * 
	**/
	
	private void addBurnRateCoefficientInput()
	{
		// Burn Rate Coefficient prompt
		burnRateCoefficientText = new Text(BURN_RATE_COEFFICIENT_PROMPT);
		burnRateCoefficientText.setTranslateX(20);
		burnRateCoefficientText.setTranslateY(160);
		this.getChildren().add(burnRateCoefficientText);
		
		// Burn Rate Coefficient input field
		burnRateCoefficientTextField = new NumberTextField();
		burnRateCoefficientTextField.setTranslateX(20);
		burnRateCoefficientTextField.setTranslateY(170);
		this.getChildren().add(burnRateCoefficientTextField);
	} // addBurnRateCoefficientInput()
	
	
	
	/**
	 * 
	**/
	
	private void addBurnRateExponentInput()
	{
		// Burn Rate Exponent prompt
		burnRateExponentText = new Text(BURN_RATE_EXPONENT_PROMPT);
		burnRateExponentText.setTranslateX(SECOND_COL_X);
		burnRateExponentText.setTranslateY(160);
		this.getChildren().add(burnRateExponentText);
		
		// Burn Rate Exponent input field
		burnRateExponentTextField = new NumberTextField();
		burnRateExponentTextField.setTranslateX(SECOND_COL_X);
		burnRateExponentTextField.setTranslateY(170);
		this.getChildren().add(burnRateExponentTextField);
	} // addBurnRateExponentInput()
	
	
	
	/**
	 * 
	**/
	
	private void addCstarInput()
	{
		// C Star prompt
		cStarText = new Text(C_STAR_PROMPT);
		cStarText.setTranslateX(FIRST_COL_X);
		cStarText.setTranslateY(230);
		this.getChildren().add(cStarText);
		
		// C Star input field
		cStarTextField = new NumberTextField();
		cStarTextField.setTranslateX(FIRST_COL_X);
		cStarTextField.setTranslateY(240);
		this.getChildren().add(cStarTextField);
	} // addCstarInput()
	
	
	
	/*
	 * 
	 */
	
	private void addPrInput ()
	{
		prText = new Text(PR_TEXT);
		prText.setTranslateX(20);
		prText.setTranslateY(160);
		this.getChildren().add(prText);
		
		prTextField = new NumberTextField();
		prTextField.setTranslateX(55);
		prTextField.setTranslateY(140);
		this.getChildren().add(prTextField);
		
		knTextpr = new Text(KN_TEXT);
		knTextpr.setTranslateX(250);
		knTextpr.setTranslateY(160);
		this.getChildren().add(knTextpr);
		
		knTextFieldpr = new NumberTextField();
		knTextFieldpr.setTranslateX(290);
		knTextFieldpr.setTranslateY(140);
		this.getChildren().add(knTextFieldpr);
	}
	
	
	
	/*
	 * 
	 */
	
	private void addBrInput ()
	{
		brText = new Text(BR_TEXT);
		brText.setTranslateX(20);
		brText.setTranslateY(210);
		this.getChildren().add(brText);
		
		brTextField = new NumberTextField();
		brTextField.setTranslateX(55);
		brTextField.setTranslateY(190);
		this.getChildren().add(brTextField);
		
		knTextbr = new Text(KN_TEXT);
		knTextbr.setTranslateX(250);
		knTextbr.setTranslateY(210);
		this.getChildren().add(knTextbr);
		
		knTextFieldbr = new NumberTextField();
		knTextFieldbr.setTranslateX(290);
		knTextFieldbr.setTranslateY(190);
		this.getChildren().add(knTextFieldbr);
	}
	
	
	
	
	/**
	 * getBurnRateCoefficientInput()
	 * 
	 * Purpose: Returns the value currently in the Burn Rate Coefficient field.
	 * 
	 * Parameters: None.
	 * 
	 * Returns: double. The value currently in the Burn Rate Coefficient field.
	**/
	
	public double getBurnRateCoefficientInput ()
	{
		return Double.parseDouble(burnRateCoefficientTextField.getText().toString());
	} // getBurnRateCoefficientInput ()
	
	
	
	/**
	 * getBurnRateExponentInput()
	 * 
	 * Purpose: Returns the value currently in the Burn Rate Exponent field.
	 * 
	 * Parameters: None.
	 * 
	 * Returns: double. The value currently in the Burn Rate Exponent field.
	**/
	
	public double getBurnRateExponentInput ()
	{
		return Double.parseDouble(burnRateExponentTextField.getText().toString());
	} // getBurnRateExponentInput ()
	
	
	
	/**
	 * getPropellantDensityInput()
	 * 
	 * Purpose: Returns the value currently in the Propellant Density field.
	 * 
	 * Parameters: None.
	 * 
	 * Returns: double. The value currently in the Propellant Density field.
	**/
	
	public double getPropellantDensityInput ()
	{
		return Double.parseDouble(propDensityTextField.getText().toString());
	} // getPropellantDensityInput ()
	
	
	
	/**
	 * getCstarInput()
	 * 
	 * Purpose: Returns the value currently in the C Star field.
	 * 
	 * Parameters: None.
	 * 
	 * Returns: double. The value currently in the C Star field.
	**/
	
	public double getCstarInput ()
	{
		return Double.parseDouble(cStarTextField.getText().toString());
	} // getCstarInput ()
	
} // class PropellantInputView
