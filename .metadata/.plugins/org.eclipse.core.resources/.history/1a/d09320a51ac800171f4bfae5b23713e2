package controller;

import java.util.ArrayList;
import java.util.List;

import javafx.application.Application;
import javafx.beans.binding.Bindings;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Tab;
import javafx.scene.control.TabPane;
import javafx.scene.control.ToolBar;
import javafx.scene.image.Image;
import javafx.scene.layout.Pane;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import model.Case;
import model.Nozzle;
import model.NumberTextField;
import model.calculations.Propellant;
import model.calculations.RocketMath;
import model.calculations.SimulationResults;
import model.grains.Grain;
import model.grains.GrainFactory;
import view.CSVConverter;
import view.CaseInputView;
import view.GraphView;
import view.NozzleInputView;
import view.PropellantInputView;
import view.grain.input.GrainInputView;

/**
 * OpenBurnGUI.java
 * 
 * Purpose: Main class for the graphical user interface of OpenBurn.
**/

public class OpenBurnGUI extends Application
{
	// Labels
	private static final String WINDOW_TITLE      = "OpenBurn - Beta";
	private static final String GENERAL_TITLE     = "General";
	private static final String NOZZLE_TITLE      = "Nozzle";
	private static final String CASE_TITLE        = "Case";
	private static final String PROPELLANT_TITLE  = "Propellant";
	private static final String SIMULATE          = "Simulate";
	private static final String EXPORT_CSV        = "Export to CSV";
	private static final String EXPORT_RSE        = "Export to RSE";
	private static final String ICON_FILE_PATH    = "./../images/OpenBurnLogo_1.png";
	private static final String CLEAR_GRAPH        = "Clear Graph";
	private static final String RESET_FIELDS        = "Reset";
	
	private static final String TEMP_LEGEND_NAME = "Sim1";
	
	
	
	// Constants
	private static final int WINDOW_WIDTH  = 1200;
	private static final int WINDOW_HEIGHT = 820;
	private static final int GRAIN_INPUT_X = 650;
	private static final int GRAIN_INPUT_Y = 10;
	private static final int GRAPH_WIDTH   = 1150;
	private static final int GRAPH_HEIGHT  = 450;
	private static final int GRAPH_X       = 20;
	private static final int GRAPH_Y       = 330;
	private static final int EMPTY         = 0;
	
	
	
	// Components
	private TabPane inputs;
	private GrainInputView grainInputs;
	private GraphView outputGraph;
	private Button simButton;
	private Button csvButton;
	private Button rseButton;
	private Button clearGraphButton;
	private Button resetButton;
	
	
	
	/**
	 * main()
	 * 
	 * Purpose: Runs the GUI for OpenBurn.
	 * 
	 * Parameters:
	 * 		String[] args -- Command-line arguments, not used.
	 * 
	 * Returns: void.
	**/
	
	public static void main (String[] args)
	{
		launch(args);
	} // main()
	
	
	
	/**
	 * start()
	 * 
	 * Purpose: Creates and initializes all OpenBurn GUI components
	 * 		for the primary window.
	 * 
	 * Parameters:
	 * 		Stage stage -- Primary window of the GUI.
	 * 
	 * Returns: void.
	**/
	
	@Override
	public void start (Stage stage)
	{
		// Initialize primary window
		Pane root = new Pane();
		Scene scene = new Scene(root, WINDOW_WIDTH, WINDOW_HEIGHT);
		stage.setScene(scene);
		stage.setTitle(WINDOW_TITLE);
		stage.getIcons().add(new Image(this.getClass().getResourceAsStream(ICON_FILE_PATH)));
		stage.setResizable(false);
		Pane frame = new Pane();
		scene.setRoot(frame);
		
		// Initialize and set components
		addInputTabs(frame);
		addGrainTable(frame);
		addGraph(frame);            // Initially Thrust vs. Time
		addSimulateButton(frame);
		addExportButtons(frame);    // CSV and RSE
		addClearGraphButton(frame);
		addResetButton(frame);
		
		// Display window
		stage.show();
	} // start()
	



	/**
	 * 
	**/
	
	private void addInputTabs (Pane frame)
	{
		// Create tabs, set them to not closable
		Tab generalTab = new Tab(GENERAL_TITLE);
		
		Tab nozzleTab = new Tab(NOZZLE_TITLE, new NozzleInputView());
		nozzleTab.setClosable(false);
		
		Tab caseTab   = new Tab(CASE_TITLE, new CaseInputView());
		caseTab.setClosable(false);
		
		Tab propellantTab   = new Tab(PROPELLANT_TITLE, new PropellantInputView());
		propellantTab.setClosable(false);
		
		inputs = new TabPane(nozzleTab, caseTab, propellantTab);
		inputs.setPrefHeight(300);

		inputs.setPrefWidth(500);
		frame.getChildren().add(inputs);
	} // 
	
	
	
	/**
	 * addGrainTable()
	 * 
	 * Purpose: Adds the grain input table and buttons
	 * 		to the given Pane.
	 * 
	 * Parameters:
	 * 		Pane pane -- The Pane to add to.
	 * 
	 * Returns: void.
	**/
	
	private void addGrainTable (Pane frame)
	{
		// Initialize table
		grainInputs = new GrainInputView();
		grainInputs.setTranslateX(GRAIN_INPUT_X);
		grainInputs.setTranslateY(GRAIN_INPUT_Y);
		frame.getChildren().add(grainInputs);
	} // addGrainTable()
	
	
	
	/**
	 * addGraph()
	 * 
	 * Purpose: Adds the graph (ScatterChart) to the given Pane.
	 * 
	 * Parameters:
	 * 		Pane frame -- The Pane to add to.
	 * 
	 * Returns: void.
	**/
	
	private void addGraph (Pane frame)
	{
		// Initialize graph, with Thrust vs. Time labels
		outputGraph = new GraphView(GraphView.THRUST_LABEL + GraphView.VERSUS_LABEL + GraphView.TIME_LABEL,
									GraphView.TIME_LABEL,
									GraphView.THRUST_LABEL);
		outputGraph.setTranslateX(GRAPH_X);
		outputGraph.setTranslateY(GRAPH_Y);
		outputGraph.getChart().setPrefWidth(GRAPH_WIDTH);
		outputGraph.getChart().setPrefHeight(GRAPH_HEIGHT);
		frame.getChildren().add(outputGraph);
	} // addGraph()
	
	
	
	/**
	 * addSimulateButton()
	 * 
	 * Purpose: Adds the simulate button to the given Pane.
	 * 
	 * Parameters:
	 * 		Pane frame -- The Pane to add to.
	 * 
	 * Returns: void.
	**/
	
	private void addSimulateButton (Pane frame)
	{
		// Initialize simulate button
		simButton = new Button(SIMULATE);
		simButton.setTranslateX(20);
		simButton.setTranslateY(780);
		simButton.setPrefHeight(35);
		simButton.setPrefWidth(100);
		simButton.setDisable(false);
		frame.getChildren().add(simButton);
		
		// No simulations have run yet
	//	simulationRan = false;
		
		// Run simulation on click
		simButton.setOnAction(new EventHandler<ActionEvent> ()
		{
		    @Override public void handle (ActionEvent e)
		    {
		    	outputGraph.setImageVisible(false);
		    	runSimulation();
		    	//simulationRan = true;

		    }
		});
		
		// Disable the button if a simulation has been run
		//simButton.disableProperty().bind(Bindings.createBooleanBinding(() -> simulationRan == true).and());
	} // addSimulateButton()
	
	
	
	/**
	 * runSimulation()
	 * 
	 * Purpose: Runs simulation once all fields are filled and
	 * 		the simulation button is pressed.
	 * 
	 * Parameters: None.
	 * 
	 * Returns: void.
	**/
	
	private void runSimulation ()
	{
		// Gather propellant density and change in time
    	double deltaTime = Double.parseDouble(timeDeltaTextField.getText().toString());
    	
    	// Gather grain list and prepare a copy for the simulation.
    	// Since a simulation alters the properties of grains, the copy list
    	// is necessary so that the original grains are untouched and can run
    	// more simulations.
    	List<Grain> grainList = grainInputs.getTable().getItems();
    	List<Grain> simGrainList = new ArrayList<Grain>(EMPTY);
    	for (Grain curGrain: grainList)
    		simGrainList.add(GrainFactory.createClone(curGrain));
    	
    	// Use nozzle inputs to create nozzle
    	NozzleInputView nozzleInputs = (NozzleInputView)(inputs.getTabs().get(0).getContent());
    	Nozzle theNozzle = new Nozzle(nozzleInputs.getThroatDiameterInput(),
    							   	  nozzleInputs.getEntranceDiameterInput(),
    							   	  nozzleInputs.getExitDiameterInput(),
    							   	  nozzleInputs.getCfInput(),
    							   	  simGrainList.size());
    	
    	// Use case inputs to create case
    	CaseInputView caseInputs = (CaseInputView)(inputs.getTabs().get(1).getContent());
    	Case theCase = new Case(caseInputs.getMassInput(),
    							caseInputs.getDiameterInput(),
    							caseInputs.getLengthInput());
    	
    	// Use propellant inputs to create propellant
    	PropellantInputView propellantInputs = (PropellantInputView)(inputs.getTabs().get(2).getContent());
    	Propellant thePropellant = new Propellant(propellantInputs.getBurnRateCoefficientInput(),
    											  propellantInputs.getBurnRateExponentInput(), 
								    			  propellantInputs.getPropellantDensityInput(), 
								    			  propellantInputs.getCstarInput());
    	
    	// Run simulation, gather list of results
    	List<SimulationResults> simResults = RocketMath.simulate(simGrainList, deltaTime, theNozzle, theCase, thePropellant);
    	
    	// Add thrust vs. time data to the chart
    	outputGraph.addData(TEMP_LEGEND_NAME, simResults);
	} // runSimulation()
	
	
	
	/**
	 * addExportButtons()
	 * 
	 * Purpose: Adds the export buttons to the given Pane.
	 * 		Currently handles CSV and RSE.
	 * 
	 * Parameters:
	 * 		Pane frame -- The Pane to add to.
	 * 
	 * Returns: void.
	**/
	
	@SuppressWarnings("unchecked")
	private void addExportButtons (Pane frame)
	{
		// Export to CSV button
		csvButton = new Button(EXPORT_CSV);
		csvButton.setTranslateX(200);
		csvButton.setTranslateY(780);
		csvButton.setPrefHeight(35);
		csvButton.setPrefWidth(130);
		csvButton.setDisable(false);
		frame.getChildren().add(csvButton);
		
		// Write data to CSV file on click
		csvButton.setOnAction(new EventHandler<ActionEvent> ()
		{
		    @Override public void handle (ActionEvent e)
		    {
		    	CSVConverter.writeResultsArr(outputGraph.getData(), TEMP_LEGEND_NAME + ".csv");
		    }
		});
		
		// Diable button if there is no simulation data
		csvButton.disableProperty().bind(Bindings.size(outputGraph.getChart().getData()).isEqualTo(EMPTY));
		
		// Export to RSE button
		rseButton = new Button(EXPORT_RSE);
		rseButton.setTranslateX(340);
		rseButton.setTranslateY(780);
		rseButton.setPrefHeight(35);
		rseButton.setPrefWidth(130);
		rseButton.setDisable(false);
		frame.getChildren().add(rseButton);
		
		// Disable button if there is no simulation data
		rseButton.disableProperty().bind(Bindings.size(outputGraph.getChart().getData()).isEqualTo(EMPTY));
	} // addExportButtons()
	
	
	
	/**
	 * addResetButton()
	 * 
	 * Purpose:
	 * 
	 * Parameters:
	 * 
	 * Returns: 
	**/
	
	private void addResetButton (Pane frame)
	{
		// 
		resetButton = new Button(RESET_FIELDS);
		resetButton.setTranslateX(1090);
		resetButton.setTranslateY(780);
		resetButton.setPrefHeight(35);
		resetButton.setPrefWidth(100);
		resetButton.setDisable(false);
		frame.getChildren().add(resetButton);
	} // 


	
	/**
	 * 
	**/
	
	private void addClearGraphButton (Pane frame)
	{
		//
		clearGraphButton = new Button(CLEAR_GRAPH);
		clearGraphButton.setTranslateX(800);
		clearGraphButton.setTranslateY(780);
		clearGraphButton.setPrefHeight(35);
		clearGraphButton.setPrefWidth(130);
		clearGraphButton.setDisable(false);
		
		//
		frame.getChildren().add(clearGraphButton);
		clearGraphButton.setOnAction(new EventHandler<ActionEvent> ()
		{
		    @Override public void handle (ActionEvent e)
		    {
		    	outputGraph.getChart().getData().clear();
		    }
		});
	} // addClearButton()
	
} // class OpenBurnGUI
