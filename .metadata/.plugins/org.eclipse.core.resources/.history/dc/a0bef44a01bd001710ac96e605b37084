package view;

import java.util.List;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.ScatterChart;
import javafx.scene.chart.XYChart;
import javafx.scene.chart.XYChart.Series;
import model.calculations.SimulationResults;

/**
 * GraphView.java
 * 
 * Purpose: A wrapper class for the ScatterChart used in the application.
 * 		This class will allow the user to more easily create an empty
 * 		ScatterChart and add data sets to it.
**/

public class GraphView
{
	// Labels
	public static final String TIME_LABEL     = "Time";
	public static final String THRUST_LABEL   = "Thrust";
	public static final String PRESSURE_LABEL = "Pressure";
	public static final String VERSUS_LABEL   = " vs. ";
	
	
	
	// Private fields
	@SuppressWarnings("rawtypes")
	private ScatterChart chart;
	
	
	
	/**
	 * GraphView Constructor (String, String, String)
	 * 
	 * Purpose: Takes in names for the x-axis, y-axis, and chart, then
	 * 		creates an empty ScatterChart that the user can access.
	**/
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public GraphView (String chartName, String xAxisName, String yAxisName)
	{
		// Create and name the x-axis
		NumberAxis xAxis = new NumberAxis();
		xAxis.setLabel(xAxisName);
		
		// Create and name the y-axis
		NumberAxis yAxis = new NumberAxis();
		yAxis.setLabel(yAxisName);
		
		// Create and name the ScatterChart
		this.chart = new ScatterChart(xAxis, yAxis);
	    chart.setTitle(chartName);
	} // GraphView Constructor (String, String, String)

	
	
	/**
	 * getChart()
	 * 
	 * Purpose: Returns the ScatterChart contained within this GraphView.
	 * 
	 * Parameters: None.
	 * 
	 * Returns: ScatterChart. The chart contained within this wrapper.
	**/
	
	@SuppressWarnings("rawtypes")
	public ScatterChart getChart ()
	{
		return chart;
	} // getChart()
	
	
	
	/**
	 * addThrustVsTimeDataSet()
	 * 
	 * Purpose: Takes in a list of simulation results, and adds the
	 * 		data into the chart. The name in the legend for the data
	 * 		set is given by the user.
	 * 
	 * 		The data set added is thrust vs. time data.
	 * 
	 * Parameters:
	 * 		String legendName -- The displayed name for new data
	 * 			set in the legend.
	 * 		List<SimulationResults> results -- List of results from
	 * 			a simulation.
	 * 
	 * Returns: void.
	**/
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public void addThrustVsTimeDataSet (String legendName, List<SimulationResults> results)
	{
		Series<Double, Double> dataSeries = new Series<Double, Double>();
		dataSeries.setName(legendName);
		
		// Adds thrust vs. time data from the simulation results to the data series
		for (SimulationResults currentResults: results)
		{
			System.out.println(currentResults.getThrust());
			dataSeries.getData().add(new XYChart.Data(currentResults.getTime(), currentResults.getThrust()));
		}
		
		// Add the data series to the chart
		chart.getData().addAll(dataSeries);
	} // addDataSet()
	
} // class GraphView
