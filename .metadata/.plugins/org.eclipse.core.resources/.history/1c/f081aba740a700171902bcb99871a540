package model;

/**
 * Grain.java
 * 
 * Contains data for an individual grain for a rocket motor.
**/

public class Grain
{
	private static double propellantDensity;   // pounds per distance^3


	// Private fields
	private double outerDiameter;
	private double length;
	private double innerDiameter;
	
	private int burningEnds;        // 0,1 or 2
	
	private double burnout;         // Time that the grain burned out
	
	
	
	/**
	 * 
	**/
	
	public Grain (double outerDiameter, double length, double innerDiameter, int burningEnds)
	{
		if (outerDiameter <= 0)
			throw new IllegalArgumentException("Outer diameter must be positive.\n");
		if (innerDiameter <= 0)
			throw new IllegalArgumentException("Inner diameter must be positive.\n");
		if (innerDiameter >= outerDiameter)
			throw new IllegalArgumentException("Outer diameter must be greater than inner diameter.\n");
		if (length < 0)
			throw new IllegalArgumentException("Length must be positive.\n");
		if (burningEnds < 0 || burningEnds > 2)
			throw new IllegalArgumentException("Burning ends must be 0, 1, or 2.\n");
		
		this.outerDiameter = outerDiameter;
		this.length        = length;
		this.innerDiameter = innerDiameter;
		this.burningEnds   = burningEnds;
		
		setBurnout(0.0);
	}
	
	
	
	/*
	 * 
	 */
	
	public static double getPropellantDensity()
	{
		return propellantDensity;
	}
	
	
	
	/*
	 * 
	 */
	
	public static void setPropelentDensity(float density)
	{
		if (density <= 0)
			throw new IllegalArgumentException("Propellent density must be positive");
		
		propellantDensity = density;
	}

	
	
	/*
	 * 
	 */
	
	public double getOuterDiameter()
	{
		return outerDiameter;
	}
	
	
	
	/*
	 * 
	 */
	
	public double getLength()
	{
		return length;
	}
	
	
	
	/*
	 * 
	 */
	
	public double getInnerDiameter()
	{
		return innerDiameter;
	}
	
	
	
	/*
	 * 
	 */
	
	public int getBurningEnds()
	{
		return burningEnds;
	}

	
	
	/*
	 * 
	 */
	
	public double getBurnout()
	{
		return burnout;
	}

	
	
	/*
	 * 
	 */
	
	public void setBurnout(float burnout)
	{
		this.burnout = burnout;
	}
	
	
	
	
	
	// returns the volume of the grain
	// based off of cylindrical_grain_volume.m
	public double getVolume()
	{
		double innerRadius = innerDiameter / 2;
		double outerRadius = outerDiameter / 2;
		
		return Math.PI * length * (outerRadius * outerRadius - innerRadius * innerRadius );
	}
	
	// returns the burnable surface area for the grain
	// based off of cylindrical_grain_burn_area.m
	public double getBurnArea()
	{
		float innerRadius = innerDiameter/2;
		float outerRadius = outerDiameter/2;
		
		double face = Math.PI * burningEnds * (outerRadius * outerRadius - innerRadius * innerRadius );
		double innerBurnArea = 2 * Math.PI * innerRadius * length;
		double surfaceArea = face + innerBurnArea;
		return Math.max(surfaceArea, 0); // guarantees we never have negative surface area.
										 // based off of motor_internal_balistics.m line 136
	}
	
	// take in burn rate and delta time
	// updates the grain's geometry
	// return the change in volume
	// based off of cylindrical_grain_geomtetry_update.m
	public double updateGeometry(float burnRate, float deltaTime)
	{
		double initialVolume = getVolume();
		length = length - burningEnds * burnRate * deltaTime;
		innerDiameter = innerDiameter + 2*burnRate*deltaTime;
		length = Math.max(length, 0);
		innerDiameter = Math.min(innerDiameter, outerDiameter);
		double newVolume = getVolume();
		if(newVolume > initialVolume)
		{
			throw new ArithmeticException("Negative Volume change occured");
		}
		return initialVolume - newVolume;
	}
}
