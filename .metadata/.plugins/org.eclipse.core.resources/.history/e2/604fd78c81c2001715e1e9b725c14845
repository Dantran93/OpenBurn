package controller;

import javafx.stage.Stage;
import model.grains.Grain;
import view.grain.input.AddGrainWindow;
import view.grain.input.EditGrainWindow;
import view.grain.input.GrainInputView;
import view.grain.input.RemoveGrainWindow;

/**
 * GrainTableHandle.java
 * 
 * Purpose: Contains methods that assist with windows communicating
 * 		between each other, particularly with the grain table
 * 		operations.
**/

public class GrainTableHandle
{
	// Fields
	private GrainInputView inputView;
	private Stage modeWindow;
	
	
	
	/**
	 * GrainTableHandle Constructor
	 * 
	 * Purpose: Initalizes the table handle with the given grain
	 * 		input view. The mode window is initialized to null.
	**/
	
	public GrainTableHandle (GrainInputView inputView)
	{
		this.inputView = inputView;
		this.modeWindow = null;
	} // GrainTableHandle Constructor
	
	
	
	/**
	 * getInputView()
	 * 
	 * Purpose: Returns the grain input view to help connect
	 * 		the windows.
	 * 
	 * Parameters: None.
	 * 
	 * Returns: GrainInputView. The grain input view.
	**/
	
	public GrainInputView getInputView ()
	{
		return inputView;
	} // getInputView()
	
	
	
	/**
	 * setToAdd()
	 * 
	 * Purpose: 
	 * 
	 * Parameters:
	 * 
	 * Returns: void.
	**/
	
	public void setToAdd (AddGrainWindow addWindow)
	{
		modeWindow = addWindow;
	} // 
	
	
	
	/*
	 * 
	 */
	
	public void setToRemove (RemoveGrainWindow removeWindow)
	{
		modeWindow = removeWindow;
	}
	
	
	
	/**
	 * setToEdit()
	 * 
	 * Purpose: Set the mode window to an edit grain
	 * 		window with the given window.
	 * 
	 * Parameters:
	 * 		EditGrainWindow editWindow -- The window
	 * 			opened to edit grains in the table.
	 * 
	 * Returns: void.
	**/
	
	public void setToEdit (EditGrainWindow editWindow)
	{
		modeWindow = editWindow;
	} // setToEdit()
	
	
	
	/*
	 * 
	 */
	
	public void addGrainToTable (Grain newGrain)
	{
		if (modeWindow instanceof AddGrainWindow)
			inputView.addRow(newGrain);
	}
	
	
	
	/**
	 * removeGrainFromTable()
	 * 
	 * Purpose: Removes the given row from the table.
	 * 
	 * Parameters:
	 * 		int row -- The row to remove.
	 * 
	 * Returns: void.
	**/
	
	public void removeGrainFromTable (int row)
	{
		if (modeWindow instanceof RemoveGrainWindow)
			inputView.removeRow(row);
	} // removeGrainFromTable()
	
	
	
	/**
	 * editGrainInTable()
	 * 
	 * Purpose: Takes the selected row in the grain table and
	 * 		a replacement grain in order to edit an existing grain.
	 * 
	 * Parameters:
	 * 		int row -- Row in the table to edit.
	 * 		Grain newGrain -- Replacement grain.
	 * 
	 * Returns: void.
	**/
	
	public void editGrainInTable (int row, Grain newGrain)
	{
		if (modeWindow instanceof EditGrainWindow)
			inputView.editRow(row, newGrain);
	} // editGrainInTable()
	
	
	
	/**
	 * getNextTableID()
	 * 
	 * Purpose: Searches the table in the input view for the next
	 * 		available grain ID.
	 * 
	 * Parameters: None.
	 * 
	 * Returns: int. 
	**/
	
	public int getNextTableID ()
	{
		int nextGrainID = 1;
		boolean idFound = false;
		
		// Count up IDs indefinitely
		while (true)
		{
			// Go through the list of grains
			for (Grain curGrain : inputView.getTable().getItems())
			{
				// Match found, mark it
				if (curGrain.getGrainID() == nextGrainID)
				{
					idFound = true;
					break;
				}
			}
			
			// Match found, go to the next ID
			if (idFound == true)
			{
				nextGrainID++;
				idFound = false;
				continue;
			}
			
			break;   // ID was never found, return the ID
		}
		
		return nextGrainID;
	} // getNextTableID()
	
} // class GrainTableHandle
