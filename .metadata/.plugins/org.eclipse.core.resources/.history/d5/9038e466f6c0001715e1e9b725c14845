package view;

import java.util.List;

import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.ScatterChart;
import javafx.scene.chart.XYChart;
import javafx.scene.chart.XYChart.Series;
import javafx.scene.control.RadioButton;
import javafx.scene.layout.Pane;
import model.calculations.SimulationResults;

/**
 * GraphView.java
 * 
 * Purpose: A wrapper class for the ScatterChart used in the application.
 * 		This class will allow the user to more easily create an empty
 * 		ScatterChart and add data sets to it.
**/

public class GraphView extends Pane
{
	// Labels
	public static final String TIME_LABEL     = "Time";
	public static final String THRUST_LABEL   = "Thrust";
	public static final String PRESSURE_LABEL = "Pressure";
	public static final String VERSUS_LABEL   = " vs. ";
	
	
	
	// Constants
	private static final int THRUST_TOGGLE_X   = 750;
	private static final int PRESSURE_TOGGLE_X = 850;
	
	
	
	// Components
	@SuppressWarnings("rawtypes")
	private ScatterChart chart;
	private RadioButton thrustToggle;
	private RadioButton pressureToggle;
	
	
	
	// Fields
	
	
	
	
	
	/**
	 * GraphView Constructor (String, String, String)
	 * 
	 * Purpose: Takes in names for the x-axis, y-axis, and chart, then
	 * 		creates an empty ScatterChart that the user can access.
	**/
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public GraphView (String chartName, String xAxisName, String yAxisName)
	{
		// Create and name the x-axis
		NumberAxis xAxis = new NumberAxis();
		xAxis.setLabel(xAxisName);
		
		// Create and name the y-axis
		NumberAxis yAxis = new NumberAxis();
		yAxis.setLabel(yAxisName);
		
		// Create and name the ScatterChart
		chart = new ScatterChart(xAxis, yAxis);
	    chart.setTitle(chartName);
	    this.getChildren().add(chart);
	    
	    addDataToggle();
	} // GraphView Constructor (String, String, String)
	
	
	
	/**
	 * 
	**/
	
	private void addDataToggle ()
	{
		thrustToggle = new RadioButton(THRUST_LABEL);
		thrustToggle.setTranslateX(THRUST_TOGGLE_X);
		thrustToggle.setTranslateY(455);
		thrustToggle.setSelected(true);
		this.getChildren().add(thrustToggle);
		
		thrustToggle.setOnAction(new EventHandler<ActionEvent> ()
		{
		    @Override public void handle (ActionEvent e)
		    {
		    	thrustToggle.setSelected(true);
		    	pressureToggle.setSelected(false);
		    }
		});
		
		pressureToggle = new RadioButton(PRESSURE_LABEL);
		pressureToggle.setTranslateX(PRESSURE_TOGGLE_X);
		pressureToggle.setTranslateY(455);
		pressureToggle.setSelected(false);
		this.getChildren().add(pressureToggle);
		
		pressureToggle.setOnAction(new EventHandler<ActionEvent> ()
		{
		    @Override public void handle (ActionEvent e)
		    {
		    	thrustToggle.setSelected(false);
		    	pressureToggle.setSelected(true);
		    }
		});
	} // addDataToggle()
	
	
	
	/**
	 * getChart()
	 * 
	 * Purpose: Returns the ScatterChart contained within this GraphView.
	 * 
	 * Parameters: None.
	 * 
	 * Returns: ScatterChart. The chart contained within this wrapper.
	**/
	
	@SuppressWarnings("rawtypes")
	public ScatterChart getChart ()
	{
		return chart;
	} // getChart()
	
	
	
	/**
	 * addThrustVsTimeDataSet()
	 * 
	 * Purpose: Takes in a list of simulation results, and adds the
	 * 		data into the chart. The name in the legend for the data
	 * 		set is given by the user.
	 * 
	 * 		The data set added is thrust vs. time data.
	 * 
	 * Parameters:
	 * 		String legendName -- The displayed name for new data
	 * 			set in the legend.
	 * 		List<SimulationResults> results -- List of results from
	 * 			a simulation.
	 * 
	 * Returns: void.
	**/
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public void addThrustVsTimeDataSet (String legendName, List<SimulationResults> results)
	{
		Series<Double, Double> dataSeries = new Series<Double, Double>();
		dataSeries.setName(legendName);
		
		// Adds thrust vs. time data from the simulation results to the data series
		for (SimulationResults currentResults: results)
			dataSeries.getData().add(new XYChart.Data(currentResults.getTime(), currentResults.getThrust()));
		
		// Add the data series to the chart
		chart.getData().addAll(dataSeries);
	} // addThrustVsTimeDataSet()
	
	
	
	/**
	 * addPressureVsTimeDataSet()
	 * 
	 * Purpose: Takes in a list of simulation results, and adds the
	 * 		data into the chart. The name in the legend for the data
	 * 		set is given by the user.
	 * 
	 * 		The data set added is thrust vs. time data.
	 * 
	 * Parameters:
	 * 		String legendName -- The displayed name for new data
	 * 			set in the legend.
	 * 		List<SimulationResults> results -- List of results from
	 * 			a simulation.
	 * 
	 * Returns: void.
	**/
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public void addPressureVsTimeDataSet (String legendName, List<SimulationResults> results)
	{
		Series<Double, Double> dataSeries = new Series<Double, Double>();
		dataSeries.setName(legendName);
		
		// Adds thrust vs. time data from the simulation results to the data series
		for (SimulationResults currentResults: results)
			dataSeries.getData().add(new XYChart.Data(currentResults.getTime(), currentResults.getChamberPressure()));
		
		// Add the data series to the chart
		chart.getData().addAll(dataSeries);
	} // addPressureVsTimeDataSet()
	
} // class GraphView
